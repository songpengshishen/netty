/**
 *
 *
 *  关于OIO(同步IO最早的java IO API),NIO(异步IO或New Io),Netty的总结
 *   PS:主要都是真的网络IO的探讨 (ServerSocket,Socket)
 *
 *  OIO,NIO,Netty的前世今生,诞生原因:
 *    1.OIO : JAVA最早的IO API,使用同步阻塞的方式来进行网络IO,这种方式简单直接,但是因为其同步阻塞的方式
 *            导致服务器只能同时处理一个客户端网络IO连接,对于并发客户端不能支持,于是产生了以下几种方法来处理并发客户
 *            端连接.
 *            多线程方式 : 每建立一个连接,就创建一个线程去处理.不阻塞服务器主线程,这样就可以同时处理多个客户端连接了,
 *                       但是新的问题出现了1.不断创建线程和销毁线程对于系统资源(硬件系统,操作系统)和服务器应用本身是一种消耗,
 *                       2.并发量大时,创建的线程数过多导致内存急剧升高会导致OOM,并且在没有到达最大内存值之前,大量线程
 *                       导致的线程调度和上下文切换会对操作系统和CPU带来很大的开销,CPU如果一直保持很高的利用率对硬件
 *                       本身就是损耗,而且一直在上下文切换代码,服务器应用本身执行的时间就会减少.于是我们需要更好的更
 *                       解决资源的方法
 *            线程池方式 : 通过线程池可以很好的达到资源复用,解决了不断创建和销毁线程所带来的资源开销,而且可以很好的控制线程数量,
 *                        但是仍有问题,线程池的线程数量依然可能会很高,因为是认为设置的,最大的问题是线程池无法检测网络IO的读写状态
 *                        创建的线程基本都在休眠,并没有干活,这何尝不是资源浪费.于是引出了NIO
 *     2.NIO : JAVA 异步IO,最早也叫做new IO,它通过Selector来绑定多个socket,并轮询检测多个socket读写,使用较少
 *                         的线程完成大量的连接.解决了线程多和线程浪费的问题,但是JAVA NIO并没有很好的封装和屏蔽
 *                         网络编程的复杂的,NIO API本身也很复杂,如果要实用NIO编写正确的,安全的,可扩展的网络应用很复杂.
 *     3.Netty : JBoss使用JAVA开发的高性能,非阻塞的,基于异步,事件驱动,回调的网络通信框架,用来开发高性能网络应用.
 *               好处:
 *                    1.使用异步,事件监听,回调的方式来完成网络IO,即可以及时完成网络IO,有可以拥有很高的性能,吞吐量.
 *                    2.用简单的抽象封装,隐藏了网络编程底层的复杂.可以很简单的开发高性能网络应用.
 *
 *      总结下网络IO前世今生 : 因为BIO导致了线程因为IO阻塞而去做无意义的线程上下文切换,而这种切换会带来很大的资源
 *                          开销,尤其在线程数量很多时,更加明显.线程池只能解决线程频繁创建和销毁带来的资源销毁
 *                          以及控制进程线程数量,解决不了IO阻塞导致的无意义操作,所以出现了NIO(非阻塞IO或者叫新IO)
 *                          ,但是JAVA NIO API实现复杂,对底层网络编程封装不够,所以出现了netty.
 *      PS:netty也是基于JAVA NIO开发的.java 的IO(尤其是网络IO)十分依赖于操作系统,因为本身就是基于操作系统的IO模型
 *         来设计实现的,所以不同操作系统和平台下,实现和性能各不相同.
 *
 *
 *
 */
package com.wsp.netty;